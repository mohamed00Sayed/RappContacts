{"version":3,"sources":["ListContacts.js","utils/ContactsAPI.js","App.js","registerServiceWorker.js","index.js"],"names":["ListContacts","state","query","updateQuery","_this","setState","trim","clearQuery","_this2","this","_this$props","props","contacts","onDeleteContact","showingContacts","filter","c","name","toLowerCase","includes","react_default","a","createElement","className","type","placeholder","value","onChange","evt","target","length","onClick","map","contact","key","id","style","backgroundImage","concat","avatarURL","handle","Component","api","process","REACT_APP_CONTACTS_API_URL","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","remove","fetch","method","then","res","json","data","App","removeContact","currentState","ContactsAPI","src_ListContacts","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App","document","getElementById","URL","origin","addEventListener","response","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.fb0b1321.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes  from 'prop-types';\r\n\r\n\r\nclass ListContacts extends Component{\r\n\tstatic propTypes = {\r\n\t\tcontacts: PropTypes.array.isRequired,\r\n\t\tonDeleteContact: PropTypes.func.isRequired\r\n\t}\r\n\t\r\n\tstate = {\r\n\t\tquery: ''\r\n\t}\r\n\t\r\n\tupdateQuery = (query) => {\r\n\t\tthis.setState(() => ({\r\n\t\t\tquery: query.trim()\r\n\t\t}))\r\n\t}\r\n\t\r\n\tclearQuery = () => {\r\n\t\tthis.updateQuery('')\r\n\t}\r\n\t\r\n\trender(){\r\n\t\t\r\n\t\tconst { query } = this.state\r\n\t\tconst { contacts, onDeleteContact } = this.props\r\n\r\n\t\tconst showingContacts = query === ''\r\n\t\t  ? contacts\r\n\t\t  : contacts.filter((c) => (\r\n\t\t\t  c.name.toLowerCase().includes(query.toLowerCase())\r\n\t\t\t))\r\n\t\treturn(\r\n\t\t\t<div className='list-contacts'>\r\n\t\t\t\t<div className='list-contacts-top'>\r\n\t\t\t\t\t<input \r\n\t\t\t\t\t\tclassName='search-contacts'\r\n\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\tplaceholder='Search Contacts'\r\n\t\t\t\t\t\tvalue={query}\r\n\t\t\t\t\t\tonChange={(evt) => {this.updateQuery(evt.target.value)}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t\r\n\t\t\t\t{showingContacts.length !== contacts.length && (\r\n\t\t\t\t\t<div className='showing-contacts'>\r\n\t\t\t\t\t\t<span>Now showing {showingContacts.length} of {contacts.length}</span>\r\n\t\t\t\t\t\t<button onClick={this.clearQuery}>Show all</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)}\r\n\t\t\t\t\r\n\t\t\t\t<ol className='contact-list'>\r\n\t\t\t\t\t{showingContacts.map((contact) => (\r\n\t\t\t\t\t\t<li key={contact.id} className='contact-list-item'>\r\n\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\tclassName='contact-avatar'\r\n\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\tbackgroundImage: `url(${contact.avatarURL})`\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t></div>\r\n\t\t\t\t\t\t\t<div className='contact-details'>\r\n\t\t\t\t\t\t\t\t<p>{contact.name}</p>\r\n\t\t\t\t\t\t\t\t<p>{contact.handle}</p>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<button className='contact-remove' onClick={()=> {onDeleteContact(contact)}}>\r\n\t\t\t\t\t\t\t\tRemove\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</ol>\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default ListContacts;","const api = process.env.REACT_APP_CONTACTS_API_URL || 'http://localhost:5001'\r\n\r\nlet token = localStorage.token\r\n\r\nif (!token)\r\n  token = localStorage.token = Math.random().toString(36).substr(-8)\r\n\r\nconst headers = {\r\n  'Accept': 'application/json',\r\n  'Authorization': token\r\n}\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/contacts`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.contacts)\r\n\r\nexport const remove = (contact) =>\r\n  fetch(`${api}/contacts/${contact.id}`, { method: 'DELETE', headers })\r\n    .then(res => res.json())\r\n    .then(data => data.contact)\r\n\r\nexport const create = (body) =>\r\n  fetch(`${api}/contacts`, {\r\n    method: 'POST',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify(body)\r\n  }).then(res => res.json())","import React, { Component } from 'react';\r\nimport ListContacts from './ListContacts';\r\nimport * as ContactsAPI from './utils/ContactsAPI'\r\n\r\nclass App extends Component {\r\n\tstate = {\r\n\t\tcontacts: []\r\n\t};\r\n\t\r\n\tcomponentDidMount(){\r\n\t\tContactsAPI.getAll()\r\n\t\t.then((contacts) => {\r\n\t\t\tthis.setState(()=>({\r\n\t\t\t\tcontacts\r\n\t\t\t}))\r\n\t\t})\r\n\t}\r\n\t\r\n\tremoveContact = (c) => {\r\n\t\tthis.setState((currentState) => (\r\n\t\t\t{\r\n\t\t\t\tcontacts: currentState.contacts.filter((contact) => (\r\n\t\t\t\t\t\tcontact.id !== c.id\r\n\t\t\t\t\t)\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t));\r\n\t\t\r\n\t\tContactsAPI.remove(c);\r\n\t};\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<ListContacts contacts ={this.state.contacts} onDeleteContact={this.removeContact}/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}